generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("FQDBHOST")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id @default(cuid())
  name                  String
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  Post                  Post[]
  Comment               Comment[]
  PostRate              PostRate[]
  CommentRate           CommentRate[]
  TopicUserRelationship TopicUserRelationship[]
  description           String?                 @db.Text
  beenWelcomed          Boolean                 @default(false)
  sender                Friend[]                @relation("sender")
  recipient             Friend[]                @relation("recipient")
  dateOfBirth           DateTime?               @db.Timestamp(0)
  createdAt             DateTime                @default(now()) @db.Timestamp(0)
  updatedAt             DateTime                @updatedAt @db.Timestamp(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  postId       String     @id @db.VarChar(24)
  author       User       @relation(fields: [authorUserId], references: [id])
  authorUserId String
  title        String     @db.Text
  content      Json
  isEdited     Boolean    @default(false) @db.Bit(1)
  ups          Int        @default(0) @db.Int
  downs        Int        @default(0) @db.Int
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @updatedAt @db.Timestamp(0)
  ratedPost    PostRate[]
}

model Comment {
  commentId    String        @id @db.VarChar(24)
  author       User          @relation(fields: [authorUserId], references: [id])
  authorUserId String
  content      Json
  parentId     String        @db.VarChar(24)
  isReply      Boolean       @db.Bit(1)
  isEdited     Boolean       @db.Bit(1)
  ups          Int           @db.Int
  downs        Int           @db.Int
  createdAt    DateTime      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime      @updatedAt @db.Timestamp(0)
  ratedComment CommentRate[]
}

model Friend {
  friendId        String   @id @db.VarChar(24)
  sender          User     @relation(name: "sender", fields: [senderUserId], references: [id])
  senderUserId    String
  recipient       User     @relation(name: "recipient", fields: [recipientUserId], references: [id])
  recipientUserId String
  status          String   @db.VarChar(12)
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)
  userId          String?
}

model Topic {
  topicId      String                  @id @db.VarChar(24)
  name         String                  @db.VarChar(52)
  topicUserRel TopicUserRelationship[]
}

model PostRate {
  rateKind   String   @db.VarChar(24)
  postRater  User     @relation(fields: [userRateId], references: [id])
  userRateId String
  ratedPost  Post     @relation(fields: [postRateId], references: [postId])
  postRateId String   @db.VarChar(24)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @db.Timestamp(0)

  @@id([userRateId, postRateId])
}

model CommentRate {
  rateKind      String   @db.VarChar(24)
  commentRater  User     @relation(fields: [userRateId], references: [id])
  userRateId    String
  ratedComment  Comment  @relation(fields: [commentRateId], references: [commentId])
  commentRateId String   @db.VarChar(24)
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  updatedAt     DateTime @updatedAt @db.Timestamp(0)

  @@id([userRateId, commentRateId])
}

model TopicUserRelationship {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [topicId])
  topicId String @db.VarChar(24)
  status  String @default("joined") @db.VarChar(24)

  @@id([userId, topicId])
}
